import streamlit as st
import pandas as pd

from datetime import datetime

from streamlit_gsheets import GSheetsConnection

def salvar_modificacao(processo_id, modificacao, usuario, nome_base_historica):
    """
    Salva uma modifica√ß√£o realizada em um processo em uma base hist√≥rica no Google Sheets.

    Par√¢metros:
        processo_id (str or int): Identificador √∫nico do processo modificado.
        modificacao (str): Descri√ß√£o da modifica√ß√£o realizada.
        usuario (str): Nome ou identificador do usu√°rio que realizou a modifica√ß√£o.
        nome_base_historica (str): Nome da worksheet (aba) no Google Sheets onde o hist√≥rico ser√° salvo.

    Comportamento:
        - L√™ os dados atuais da worksheet especificada.
        - Adiciona uma nova linha com as informa√ß√µes da modifica√ß√£o, incluindo data e hora atual.
        - Atualiza a worksheet com o novo hist√≥rico.
        - Em caso de erro, exibe uma mensagem de erro e interrompe a execu√ß√£o.

    Exce√ß√µes:
        Exibe mensagem de erro na interface Streamlit e interrompe a execu√ß√£o caso ocorra qualquer exce√ß√£o durante o processo.
    """

    conn = st.connection("gsheets", type=GSheetsConnection)
    agora = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    nova_modificacao = {
        "Processo ID": processo_id,
        "Data e Hora": agora,
        "Modifica√ß√£o": modificacao,
        "Usu√°rio": usuario
    }
    try:
        # L√™ os dados atuais
        df = conn.read(worksheet=nome_base_historica, ttl=0)
        df = pd.DataFrame(df)  
        df = pd.concat([df, pd.DataFrame([nova_modificacao])], ignore_index=True)
        conn.update(worksheet=nome_base_historica, data=df)
    except Exception as e:
        st.error(f"Erro ao salvar a modifica√ß√£o: {e}")
        st.stop()

def salvar_modificacoes_em_lote(modificacoes, usuario, base_historico): 
    """
    Salva um lote de modifica√ß√µes em uma planilha do Google Sheets, registrando o ID do processo, data e hora da modifica√ß√£o, descri√ß√£o da modifica√ß√£o e o usu√°rio respons√°vel.
    Args:
        modificacoes (list of tuple): Lista de tuplas contendo (processo_id, modificacao) para cada modifica√ß√£o a ser salva.
        usuario (str): Nome ou identificador do usu√°rio que realizou as modifica√ß√µes.
        base_historico (str): Nome da worksheet (aba) no Google Sheets onde o hist√≥rico ser√° salvo.
    Raises:
        Exibe uma mensagem de erro na interface Streamlit e interrompe a execu√ß√£o caso ocorra alguma exce√ß√£o durante o salvamento.
    """

    conn = st.connection("gsheets", type=GSheetsConnection)
    agora = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    novas_modificacoes = []
    for processo_id, modificacao in modificacoes:
        novas_modificacoes.append({
            "Processo ID": processo_id,
            "Data e Hora": agora,
            "Modifica√ß√£o": modificacao,
            "Usu√°rio": usuario
        })
    try:
        df = conn.read(worksheet=base_historico, ttl=0)
        df = pd.DataFrame(df)
        df = pd.concat([df, pd.DataFrame(novas_modificacoes)], ignore_index=True)
        conn.update(worksheet=base_historico, data=df)
    except Exception as e:
        st.error(f"Erro ao salvar as modifica√ß√µes: {e}")
        st.stop()

def exibir_historico(processo_edit, base_historico):
    """
    Exibe o hist√≥rico de modifica√ß√µes de um processo selecionado em formato hier√°rquico.
    Par√¢metros:
        processo_edit (str or int): Identificador do processo selecionado para visualiza√ß√£o do hist√≥rico.
        base_historico (str): Nome da worksheet no Google Sheets contendo o hist√≥rico das modifica√ß√µes.
    Funcionalidade:
        - Caso nenhum processo seja selecionado, exibe uma mensagem informativa.
        - L√™ os dados do hist√≥rico a partir de uma conex√£o com Google Sheets.
        - Filtra as modifica√ß√µes referentes ao processo selecionado.
        - Caso n√£o haja modifica√ß√µes, exibe um aviso.
        - Agrupa as modifica√ß√µes por usu√°rio e minuto de altera√ß√£o.
        - Exibe o hist√≥rico em formato de √°rvore hier√°rquica, mostrando usu√°rio, data/hora e as modifica√ß√µes realizadas.
    Depend√™ncias:
        - Requer Streamlit (`st`) para exibi√ß√£o das mensagens e markdown.
        - Requer pandas (`pd`) para manipula√ß√£o dos dados.
        - Requer uma conex√£o do tipo `GSheetsConnection` configurada no Streamlit.
    """

    if not processo_edit:
        st.info("Selecione um processo para visualizar o hist√≥rico.")
        return

    conn = st.connection("gsheets", type=GSheetsConnection)
    df = pd.DataFrame(conn.read(worksheet=base_historico, ttl=0))

    # Filtrar pelo processo selecionado
    df = df[df["Processo ID"] == processo_edit]

    if df.empty:
        st.warning("‚ö†Ô∏è Nenhuma modifica√ß√£o registrada para este processo.")
        return

    # Criar uma coluna de agrupamento por minuto
    df["Grupo"] = df.apply(lambda row: f"{row['Usu√°rio']} ‚Äî {row['Data e Hora'][:16]}", axis=1)  # 'YYYY-MM-DD HH:MM'

    # Ordenar cronologicamente por esse agrupamento
    df = df.sort_values(by="Data e Hora", ascending=False)

    # Agrupar
    agrupado = {}
    for _, row in df.iterrows():
        grupo = row["Grupo"]
        if grupo not in agrupado:
            agrupado[grupo] = []
        agrupado[grupo].append(row["Modifica√ß√£o"])

    # Montar a estrutura hier√°rquica
    estrutura = f"üìÅ Hist√≥rico de Modifica√ß√µes ‚Äî Processo: {processo_edit}\n"
    linhas = []
    grupos = list(agrupado.items())
    for i, (grupo, modificacoes) in enumerate(grupos):
        con_grupo = "‚îî‚îÄ‚îÄ" if i == len(grupos) - 1 else "‚îú‚îÄ‚îÄ"
        linhas.append(f"{con_grupo} üìÇ {grupo}")
        for j, mod in enumerate(modificacoes):
            con_mod = "    ‚îî‚îÄ‚îÄ" if j == len(modificacoes) - 1 else "    ‚îú‚îÄ‚îÄ"
            linhas.append(f"{con_mod} üìù {mod}")

    estrutura += "\n".join(linhas)
    st.markdown("```plaintext\n" + estrutura + "\n```")