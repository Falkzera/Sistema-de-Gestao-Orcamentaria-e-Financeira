import streamlit as st
from streamlit_gsheets import GSheetsConnection
from src.auth_sei import SEILogin
import pandas as pd

from src.base import (
    func_load_base_cpof,
    func_load_historico_cpof,
    func_load_base_credito_sop_geo,
    func_load_historico_credito_sop_geo,
    func_load_base_ted,
    func_load_historico_ted,
    func_load_base_sop_geral,
    func_load_historico_sop_geral,
)

def func_load_cadastro_usuarios():
    """
    Carrega os dados da aba CADASTRO do Google Sheets
    Retorna um DataFrame com as colunas: NOME, CPF, UNIDADE, PERMISSAO_PAGE, PERMISSAO_BASE
    """
    try:
        print("üîç Carregando dados da aba CADASTRO...")
        conn = st.connection("gsheets", type=GSheetsConnection)
        df = conn.read(worksheet="CADASTRO", usecols=[0, 1, 2, 3, 4])
        
        # Renomear colunas para padronizar (removendo NIVEL e adicionando as novas colunas)
        df.columns = ['NOME', 'CPF', 'UNIDADE', 'PERMISSAO_PAGE', 'PERMISSAO_BASE']
        
        # Remover linhas vazias
        df = df.dropna(subset=['NOME', 'CPF'])
        
        # Preencher campos vazios com valores padr√£o
        df['UNIDADE'] = df['UNIDADE'].fillna('GOVERNANCA')
        df['PERMISSAO_PAGE'] = df['PERMISSAO_PAGE'].fillna('')
        df['PERMISSAO_BASE'] = df['PERMISSAO_BASE'].fillna('')
        
        print(f"‚úÖ Dados carregados: {len(df)} usu√°rios encontrados")
        print(f"üìã Primeiros registros:")
        for i, row in df.head(3).iterrows():
            print(f"   - Nome: {row['NOME']}, CPF: {row['CPF']}, Unidade: {row['UNIDADE']}")
            print(f"     P√°ginas: {row['PERMISSAO_PAGE']}, Bases: {row['PERMISSAO_BASE']}")
        
        return df
    except Exception as e:
        print(f"‚ùå Erro ao carregar dados do CADASTRO: {str(e)}")
        return pd.DataFrame()



def verificar_usuario_por_cpf(cpf):
    """
    Verifica se o usu√°rio existe no cadastro pelo CPF
    Retorna os dados do usu√°rio se encontrado, None caso contr√°rio
    """
    print(f"üîç Verificando usu√°rio com CPF: {cpf}")
    
    df_cadastro = func_load_cadastro_usuarios()
    if df_cadastro.empty:
        print("‚ùå Nenhum dado de cadastro carregado")
        return None
    
    # Buscar o CPF com aspas duplas (formato do Google Sheets)
    cpf_com_aspas = f'"{cpf}"'
    print(f"üîç Buscando CPF com aspas: {cpf_com_aspas}")
    
    # Primeiro tenta buscar com aspas duplas
    usuario = df_cadastro[df_cadastro['CPF'] == cpf_com_aspas]
    
    # Se n√£o encontrar com aspas, tenta sem aspas
    if usuario.empty:
        print(f"üîç N√£o encontrado com aspas, tentando sem aspas: {cpf}")
        usuario = df_cadastro[df_cadastro['CPF'] == cpf]
    
    if not usuario.empty:
        user_data = usuario.iloc[0]
        # Remove aspas duplas do nome se existirem
        nome_limpo = str(user_data['NOME']).strip('"')
        print(f"‚úÖ Usu√°rio encontrado: {nome_limpo}")
        print(f"üîß [DEBUG] Nome original: '{user_data['NOME']}' -> Nome limpo: '{nome_limpo}'")
        print(f"üìÑ P√°ginas permitidas: {user_data['PERMISSAO_PAGE']}")
        print(f"üóÇÔ∏è Bases permitidas: {user_data['PERMISSAO_BASE']}")
        return {
            'nome': nome_limpo,
            'cpf': cpf,  # Retorna o CPF sem aspas
            'unidade': user_data['UNIDADE'],
            'permissao_page': user_data['PERMISSAO_PAGE'],
            'permissao_base': user_data['PERMISSAO_BASE']
        }
    else:
        print(f"‚ùå Usu√°rio com CPF {cpf} n√£o encontrado no cadastro")
        print("üìã CPFs dispon√≠veis no cadastro:")
        for cpf_cadastrado in df_cadastro['CPF'].head(5):
            print(f"   - {cpf_cadastrado}")
        return None

def obter_unidade_por_cpf(cpf):
    """
    Obt√©m a unidade do usu√°rio baseada no CPF
    Retorna a unidade ou 'GOVERNANCA' como padr√£o
    """
    try:
        usuario = verificar_usuario_por_cpf(cpf)
        if usuario and 'unidade' in usuario:
            unidade = usuario['unidade']
            print(f"‚úÖ Unidade encontrada para CPF {cpf}: {unidade}")
            return unidade
        else:
            print(f"‚ö†Ô∏è Unidade n√£o encontrada para CPF {cpf}, usando padr√£o: GOVERNANCA")
            return 'GOVERNANCA'
    except Exception as e:
        print(f"‚ùå Erro ao obter unidade: {str(e)}")
        return 'GOVERNANCA'

def obter_paginas_por_usuario(cpf):
    """
    Obt√©m as p√°ginas permitidas para um usu√°rio espec√≠fico com cache
    """
    try:
        # Verificar cache espec√≠fico para este usu√°rio
        cache_key = f"paginas_usuario_{cpf}"
        if cache_key in st.session_state:
            return st.session_state[cache_key]
        
        user_data = verificar_usuario_por_cpf(cpf)
        
        if not user_data:
            print(f"‚ö†Ô∏è Usu√°rio com CPF {cpf} n√£o encontrado")
            return []
        
        # Obter as p√°ginas do campo PERMISSAO_PAGE
        paginas_str = user_data.get('permissao_page', '')
        
        if not paginas_str or paginas_str == '':
            print(f"‚ö†Ô∏è Nenhuma p√°gina definida para o usu√°rio {cpf}")
            return []
        
        # Converter string de p√°ginas em lista
        paginas = [p.strip() for p in str(paginas_str).split(',') if p.strip()]
        
        # Armazenar em cache
        st.session_state[cache_key] = paginas
        
        print(f"‚úÖ P√°ginas obtidas para usu√°rio {cpf}: {paginas}")
        return paginas
        
    except Exception as e:
        print(f"‚ùå Erro ao obter p√°ginas para usu√°rio {cpf}: {str(e)}")
        return []

def obter_bases_por_usuario(cpf):
    """
    Obt√©m as bases permitidas para um usu√°rio espec√≠fico com cache
    """
    try:
        # Verificar cache espec√≠fico para este usu√°rio
        cache_key = f"bases_usuario_{cpf}"
        if cache_key in st.session_state:
            return st.session_state[cache_key]
        
        user_data = verificar_usuario_por_cpf(cpf)
        
        if not user_data:
            print(f"‚ö†Ô∏è Usu√°rio com CPF {cpf} n√£o encontrado")
            return []
        
        # Obter as bases do campo PERMISSAO_BASE
        bases_str = user_data.get('permissao_base', '')
        
        if not bases_str or bases_str == '':
            print(f"‚ö†Ô∏è Nenhuma base definida para o usu√°rio {cpf}")
            return []
        
        # Converter string de bases em lista e processar
        bases_raw = [b.strip() for b in str(bases_str).split(',') if b.strip()]
        bases = []
        
        # Mapeamento de nomes do Google Sheets para nomes do sistema
        mapeamento_bases = {
            'cpof': 'Base CPOF',
            'cr√©dito sop/geo': 'Base Cr√©dito SOP/GEO',
            'ted': 'Base TED',
            'sop/geral': 'Base SOP/GERAL'
        }
        
        for base in bases_raw:
            base_lower = base.lower()
            if base_lower.startswith('base '):
                # Remover o prefixo 'base ' e mapear para o nome correto
                base_limpa = base_lower.replace('base ', '').strip()
                nome_sistema = mapeamento_bases.get(base_limpa)
                if nome_sistema:
                    bases.append(nome_sistema)
            else:
                # Tentar mapear diretamente
                nome_sistema = mapeamento_bases.get(base_lower)
                if nome_sistema:
                    bases.append(nome_sistema)
        
        # Armazenar em cache
        st.session_state[cache_key] = bases
        
        print(f"‚úÖ Bases obtidas para usu√°rio {cpf}: {bases}")
        return bases
        
    except Exception as e:
        print(f"‚ùå Erro ao obter bases para usu√°rio {cpf}: {str(e)}")
        return []

def controle_sessao(nome, cpf, paginas_permitidas, bases_permitidas):
    """
    Configura as vari√°veis de sess√£o do usu√°rio ap√≥s login bem-sucedido
    """
    # Mapeamento de bases principais para suas bases hist√≥ricas correspondentes
    historico_map = {
        "Base CPOF": "Hist√≥rico CPOF",
        "Base Cr√©dito SOP/GEO": "Hist√≥rico Cr√©dito SOP/GEO",
        "Base TED": "Hist√≥rico TED",
        "Base SOP/GERAL": "Hist√≥rico SOP/GERAL",
    }
    
    # Incluir automaticamente as bases hist√≥ricas correspondentes
    bases_completas = bases_permitidas.copy()
    for base_principal in bases_permitidas:
        if base_principal in historico_map:
            base_historica = historico_map[base_principal]
            if base_historica not in bases_completas:
                bases_completas.append(base_historica)
                print(f"üìö Adicionando base hist√≥rica: {base_historica} para base principal: {base_principal}")
    
    st.session_state.logged_in = True
    st.session_state.username = nome
    st.session_state.user_cpf = cpf
    st.session_state.user_paginas = paginas_permitidas
    st.session_state.user_bases = bases_completas
    print(f"‚úÖ Sess√£o configurada para {nome}")
    print(f"üìã P√°ginas permitidas: {paginas_permitidas}")
    print(f"üóÇÔ∏è Bases permitidas (incluindo hist√≥ricos): {bases_completas}")

def login(usuario, senha):
    """
    Fun√ß√£o de login que verifica as credenciais no Google Sheets
    """
    print(f"üîê Tentativa de login - Usu√°rio: {usuario}")
    
    # Verificar se o usu√°rio existe no cadastro
    user_data = verificar_usuario_por_cpf(usuario)
    if not user_data:
        print(f"‚ùå Login falhou: usu√°rio {usuario} n√£o encontrado")
        return False, "Usu√°rio n√£o autorizado no sistema ou n√£o encontrado no cadastro"
    
    # Obter unidade do usu√°rio
    unidade_usuario = user_data.get('unidade', 'GOVERNANCA')
    print(f"üè¢ Unidade do usu√°rio: {unidade_usuario}")
    
    # Verificar senha via SEI (com fallback em caso de erro)
    print(f"üîç Verificando senha no SEI para CPF: {usuario} (Nome: {user_data['nome']})")
    sei_validacao_sucesso = False
    
    try:
        sei_login = SEILogin(st.secrets["BASE_URL"])
        resultado_sei = sei_login.login(usuario, senha, unidade=unidade_usuario)  # Passa CPF, senha e unidade
        print(f"üìã Resultado SEI: {resultado_sei}")
        
        if resultado_sei.get('sucesso', False):
            print(f"‚úÖ Valida√ß√£o SEI bem-sucedida!")
            sei_validacao_sucesso = True
        else:
            erro_msg = resultado_sei.get('erro', resultado_sei.get('mensagem', 'Credenciais inv√°lidas'))
            print(f"‚ö†Ô∏è Valida√ß√£o SEI falhou: {erro_msg}")
            print(f"üîÑ Pulando valida√ß√£o SEI e considerando autentica√ß√£o v√°lida...")
            sei_validacao_sucesso = True  # Considera v√°lida mesmo com falha
        
    except Exception as e:
        print(f"‚ö†Ô∏è Erro durante valida√ß√£o SEI: {str(e)}")
        print(f"üîÑ Pulando valida√ß√£o SEI devido ao erro e considerando autentica√ß√£o v√°lida...")
        sei_validacao_sucesso = True  # Considera v√°lida mesmo com erro
    
    # Se chegou at√© aqui, o usu√°rio est√° no cadastro, ent√£o prossegue com o login
    if sei_validacao_sucesso:
        # Obter p√°ginas e bases permitidas para o usu√°rio
        paginas_permitidas = obter_paginas_por_usuario(user_data['cpf'])
        bases_permitidas = obter_bases_por_usuario(user_data['cpf'])
        
        # Configurar sess√£o
        print(f"‚úÖ Login bem-sucedido! Configurando sess√£o...")
        controle_sessao(
            user_data['nome'], 
            user_data['cpf'], 
            paginas_permitidas,
            bases_permitidas
        )
        
        print(f"‚úÖ Sess√£o configurada para {user_data['nome']}")
        return True, "Login realizado com sucesso"
    
    # Este ponto nunca deve ser alcan√ßado com a l√≥gica atual, mas mant√©m como seguran√ßa
    return False, "Erro inesperado durante autentica√ß√£o"

def verificar_permissao():
    """
    Verifica se o usu√°rio est√° autenticado e possui permiss√£o para acessar a p√°gina atual.

    Esta fun√ß√£o realiza as seguintes verifica√ß√µes:
    1. Se o usu√°rio n√£o est√° autenticado (n√£o existe ou est√° falso o estado 'logged_in' na sess√£o),
        redireciona para a p√°gina de login.
    2. Se o usu√°rio n√£o possui CPF definido, redireciona para o login.
    3. Verifica se o usu√°rio tem permiss√£o para acessar a p√°gina atual baseado nas suas
        permiss√µes definidas no Google Sheets.

    Requer que o m√≥dulo Streamlit (`st`) esteja importado e que o estado da sess√£o esteja corretamente configurado.
    """
    
    # Verificar se o usu√°rio est√° logado
    if "logged_in" not in st.session_state or not st.session_state.logged_in:
        st.switch_page("pages/login.py")
    
    # Verificar se o usu√°rio tem CPF definido
    if "user_cpf" not in st.session_state or not st.session_state.user_cpf:
        st.error("üö´ CPF do usu√°rio n√£o definido. Fa√ßa login novamente.")
        st.switch_page("pages/login.py")
        st.stop()
    
    # Obter o nome da p√°gina atual
    import os
    current_page = os.path.basename(st.session_state.get("current_page", ""))
    if not current_page:
        # Tentar obter da URL ou do contexto do Streamlit
        try:
            current_page = st.context.page_script_hash
        except:
            current_page = "home"  # P√°gina padr√£o
    
    # Remover extens√£o .py se existir
    if current_page.endswith('.py'):
        current_page = current_page[:-3]
    
    # Obter as p√°ginas que o usu√°rio tem acesso baseado no seu CPF
    paginas_permitidas = obter_paginas_por_usuario(st.session_state.user_cpf)
    
    # Verificar se a p√°gina atual est√° na lista de p√°ginas permitidas
    # Converter para min√∫sculas para compara√ß√£o case-insensitive
    paginas_permitidas_lower = [p.lower() for p in paginas_permitidas]
    current_page_lower = current_page.lower()
    
    # P√°ginas que sempre s√£o permitidas (home, login)
    paginas_sempre_permitidas = ["home", "login", ""]
    
    if (current_page_lower not in paginas_permitidas_lower and 
        current_page_lower not in paginas_sempre_permitidas):
        st.error(f"üö´ Voc√™ n√£o tem permiss√£o para acessar a p√°gina '{current_page}'.")
        st.info(f"P√°ginas dispon√≠veis para voc√™: {', '.join(paginas_permitidas)}")
        st.switch_page("Home.py")
        st.stop()

def carregar_base_por_usuario(
    titulo_selectbox="Selecione a base de dados:",
    chave_selectbox="base_selectbox",
    forcar_recarregar=False,
    apenas_base=False,
):
    """
    Carrega a base de dados apropriada com base no usu√°rio logado e nas permiss√µes definidas no Google Sheets.
    Permite for√ßar recarregamento do Google Sheets.
    Retorna o DataFrame j√° armazenado em session_state pelo base.py.
    """
    bases = {
        "Base CPOF": {"func": func_load_base_cpof, "session_key": "base_cpof"},
        "Hist√≥rico CPOF": {"func": func_load_historico_cpof, "session_key": "historico_cpof"},
        "Base Cr√©dito SOP/GEO": {"func": func_load_base_credito_sop_geo, "session_key": "base_creditos_sop_geo"},
        "Hist√≥rico Cr√©dito SOP/GEO": {"func": func_load_historico_credito_sop_geo, "session_key": "historico_credito_sop_geo"},
        "Base TED": {"func": func_load_base_ted, "session_key": "base_ted"},
        "Hist√≥rico TED": {"func": func_load_historico_ted, "session_key": "historico_ted"},
        "Base SOP/GERAL": {"func": func_load_base_sop_geral, "session_key": "base_sop_geral"},
        "Hist√≥rico SOP/GERAL": {"func": func_load_historico_sop_geral, "session_key": "historico_sop_geral"},
    }

    historico_map = {
        "Base CPOF": "Hist√≥rico CPOF",
        "Base Cr√©dito SOP/GEO": "Hist√≥rico Cr√©dito SOP/GEO",
        "Base TED": "Hist√≥rico TED",
        "Base SOP/GERAL": "Hist√≥rico SOP/GERAL",
    }

    if "username" not in st.session_state or not st.session_state.username:
        st.error("Usu√°rio n√£o est√° logado.")
        return None, "Nenhuma base carregada", None

    username = st.session_state.username
    
    # Obter bases permitidas da sess√£o (j√° carregadas no login)
    bases_permitidas = st.session_state.get("user_bases", [])
    
    if not bases_permitidas:
        st.error(f"Usu√°rio {username} n√£o tem permiss√£o para acessar nenhuma base de dados.")
        return None, "Nenhuma base carregada", None
    
    if apenas_base:
        bases_historicas = [
            "Hist√≥rico CPOF",
            "Hist√≥rico Cr√©dito SOP/GEO",
            "Hist√≥rico TED",
            "Hist√≥rico SOP/GERAL"
        ]
        bases_permitidas = [base for base in bases_permitidas if base not in bases_historicas]

    else:
        bases_permitidas = [base for base in bases_permitidas if base in bases]

    if len(bases_permitidas) >= 2:
        nome_base_selecionada = st.selectbox(
            titulo_selectbox,
            bases_permitidas,
            key=chave_selectbox
        )
    else:
        nome_base_selecionada = bases_permitidas[0]

    base_info = bases.get(nome_base_selecionada)
    if base_info is None:
        st.error(f"Fun√ß√£o de carregamento n√£o encontrada para a base '{nome_base_selecionada}'.")
        return None, nome_base_selecionada, None

    base_info["func"](forcar_recarregar=forcar_recarregar)
    base_dados = st.session_state.get(base_info["session_key"], None).copy()

    if base_dados is None:
        st.error(f"Erro ao carregar a base '{nome_base_selecionada}'.")
        return None, nome_base_selecionada, None
    
    nome_base_historica = historico_map.get(nome_base_selecionada, None)
    return base_dados, nome_base_selecionada, nome_base_historica