import time
import os
import subprocess
import re
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait, Select
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException, UnexpectedAlertPresentException
from webdriver_manager.chrome import ChromeDriverManager

def is_local():
    """
    Verifica se a aplica√ß√£o est√° rodando localmente (modo desenvolvedor)
    """
    try:
        # Verifica vari√°veis de ambiente que indicam desenvolvimento
        is_dev_env = (
            os.getenv('STREAMLIT_SERVER_PORT') is not None or
            os.getenv('STREAMLIT_DEV_MODE') == 'true' or
            'localhost' in str(os.getenv('STREAMLIT_SERVER_ADDRESS', '')) or
            '127.0.0.1' in str(os.getenv('STREAMLIT_SERVER_ADDRESS', ''))
        )
        
        # Verifica se est√° rodando em porta de desenvolvimento (8501 √© padr√£o do Streamlit)
        dev_port = os.getenv('STREAMLIT_SERVER_PORT', '8501')
        
        return is_dev_env or dev_port == '8501'
        
    except Exception:
        return False

def get_chrome_version():
    """
    Detecta a vers√£o do Chrome/Chromium instalada no sistema
    """
    print("üîß [DEBUG] Detectando vers√£o do Chrome...")
    
    try:
        # Detecta o sistema operacional
        import platform
        system = platform.system().lower()
        print(f"üîß [DEBUG] Sistema operacional: {system}")
        
        commands = []
        
        if system == "windows":
            # Windows - tenta diferentes localiza√ß√µes do Chrome
            chrome_paths = [
                r"C:\Program Files\Google\Chrome\Application\chrome.exe",
                r"C:\Program Files (x86)\Google\Chrome\Application\chrome.exe",
                r"C:\Users\{}\AppData\Local\Google\Chrome\Application\chrome.exe".format(os.getenv('USERNAME', '')),
                "chrome.exe"  # Se estiver no PATH
            ]
            
            for path in chrome_paths:
                 if os.path.exists(path) or path == "chrome.exe":
                     commands.append([path, "--version"])
                    
            # Tamb√©m tenta via registro do Windows
            try:
                import winreg
                print("üîß [DEBUG] Tentando detectar via registro do Windows...")
                
                # Tenta diferentes chaves do registro
                registry_paths = [
                    (winreg.HKEY_CURRENT_USER, r"Software\Google\Chrome\BLBeacon"),
                    (winreg.HKEY_LOCAL_MACHINE, r"Software\Google\Chrome\BLBeacon"),
                    (winreg.HKEY_LOCAL_MACHINE, r"Software\Wow6432Node\Google\Chrome\BLBeacon"),
                ]
                
                for hkey, subkey in registry_paths:
                    try:
                        with winreg.OpenKey(hkey, subkey) as key:
                            version, _ = winreg.QueryValueEx(key, "version")
                            print(f"‚úÖ [DEBUG] Vers√£o encontrada no registro: {version}")
                            
                            # Extrai vers√£o major
                            version_match = re.search(r'(\d+)\.(\d+)\.(\d+)\.(\d+)', version)
                            if version_match:
                                major_version = version_match.group(1)
                                print(f"‚úÖ [DEBUG] Vers√£o detectada via registro: {version} (major: {major_version})")
                                return version, major_version
                                
                    except (FileNotFoundError, OSError, winreg.error):
                        continue
                        
            except ImportError:
                print("üîß [DEBUG] winreg n√£o dispon√≠vel")
                
        else:
            # Linux/Cloud (Chromium) - prioriza o caminho espec√≠fico do Streamlit Cloud
            commands = [
                ["/usr/bin/chromium", "--version"],  # Caminho espec√≠fico do Streamlit Cloud
                ["/usr/bin/chromium-browser", "--version"],
                ["chromium", "--version"],
                ["chromium-browser", "--version"],
                ["google-chrome", "--version"],
                ["google-chrome-stable", "--version"],
            ]
            
            # Estrat√©gia adicional: verifica se existe o bin√°rio no caminho espec√≠fico
            if os.path.exists("/usr/bin/chromium"):
                print("üîß [DEBUG] Chromium encontrado em /usr/bin/chromium (Streamlit Cloud)")
                try:
                    # For√ßa detec√ß√£o no caminho espec√≠fico do Streamlit Cloud
                    result = subprocess.run(["/usr/bin/chromium", "--version"], 
                                          capture_output=True, text=True, timeout=10)
                    if result.returncode == 0:
                        version_output = result.stdout.strip()
                        print(f"üîß [DEBUG] Vers√£o do Chromium no Cloud: {version_output}")
                        
                        # Extrai vers√£o espec√≠fica para Chromium 120.x
                        version_match = re.search(r'(\d+)\.(\d+)\.(\d+)\.(\d+)', version_output)
                        if version_match:
                            version = version_match.group(0)
                            major_version = version_match.group(1)
                            print(f"‚úÖ [DEBUG] Vers√£o Chromium Cloud detectada: {version} (major: {major_version})")
                            return version, major_version
                except Exception as e:
                    print(f"‚ö†Ô∏è [DEBUG] Erro ao detectar Chromium no Cloud: {str(e)}")
                    pass
        
        # Tenta executar comandos
        for cmd in commands:
            try:
                print(f"üîß [DEBUG] Tentando comando: {' '.join(cmd)}")
                result = subprocess.run(cmd, capture_output=True, text=True, timeout=10)
                if result.returncode == 0:
                    version_output = result.stdout.strip()
                    print(f"üîß [DEBUG] Sa√≠da do comando: {version_output}")
                    
                    # Extrai o n√∫mero da vers√£o usando regex
                    version_match = re.search(r'(\d+)\.(\d+)\.(\d+)\.(\d+)', version_output)
                    if version_match:
                        version = version_match.group(0)
                        major_version = version_match.group(1)
                        print(f"‚úÖ [DEBUG] Vers√£o detectada: {version} (major: {major_version})")
                        return version, major_version
                        
            except (subprocess.TimeoutExpired, FileNotFoundError, subprocess.SubprocessError) as e:
                print(f"üîß [DEBUG] Comando {cmd[0]} falhou: {str(e)}")
                continue
        
        print("‚ö†Ô∏è [DEBUG] N√£o foi poss√≠vel detectar a vers√£o do Chrome")
        return None, None
        
    except Exception as e:
        print(f"‚ùå [DEBUG] Erro ao detectar vers√£o do Chrome: {str(e)}")
        return None, None

def get_compatible_chromedriver_version(chrome_version):
    """
    Retorna a vers√£o compat√≠vel do ChromeDriver baseada na vers√£o do Chrome
    """
    if not chrome_version:
        return None
    
    try:
        major_version = int(chrome_version.split('.')[0])
        print(f"üîß [DEBUG] Vers√£o major do Chrome: {major_version}")
        
        # Mapeamento de vers√µes compat√≠veis (baseado na documenta√ß√£o oficial)
        version_mapping = {
            140: "140.0.7339.128",  # Vers√£o mais recente
            139: "139.0.7302.122",
            138: "138.0.7262.94",
            137: "137.0.7225.93",
            136: "136.0.7188.102",
            135: "135.0.7151.116",
            134: "134.0.7114.102",
            133: "133.0.7077.126",
            132: "132.0.7040.122",
            131: "131.0.7003.120",
            130: "130.0.6966.116",
            129: "129.0.6929.110",
            128: "128.0.6892.102",
            127: "127.0.6855.122",
            126: "126.0.6818.119",
            125: "125.0.6781.107",
            124: "124.0.6744.117",
            123: "123.0.6707.116",
            122: "122.0.6670.129",
            121: "121.0.6633.119",
            120: "120.0.6099.109",
            119: "119.0.6045.105", 
            118: "118.0.5993.70",
            117: "117.0.5938.92",
            116: "116.0.5845.96",
            115: "115.0.5790.102",
            114: "114.0.5735.90",
        }
        
        compatible_version = version_mapping.get(major_version)
        if compatible_version:
            print(f"‚úÖ [DEBUG] Vers√£o compat√≠vel do ChromeDriver: {compatible_version}")
            return compatible_version
        else:
            print(f"‚ö†Ô∏è [DEBUG] Vers√£o {major_version} n√£o mapeada, usando autom√°tica")
            return None
            
    except Exception as e:
        print(f"‚ùå [DEBUG] Erro ao determinar vers√£o compat√≠vel: {str(e)}")
        return None

# def chrome():
#     """Configura e retorna uma inst√¢ncia do Chrome WebDriver otimizada"""
#     print("üîß [DEBUG] Iniciando configura√ß√£o do Chrome...")
    
#     try:
#         # Configura√ß√µes do Chrome
#         print("üîß [DEBUG] Configurando op√ß√µes do Chrome...")
#         options = Options()
#         options.add_argument("--headless")  # Modo headless ativado
#         options.add_argument("--no-sandbox")
#         options.add_argument("--disable-dev-shm-usage")
#         options.add_argument("--disable-gpu")
#         options.add_argument("--disable-extensions")
#         options.add_argument("--disable-plugins")
#         options.add_argument("--disable-images")
#         options.add_argument("--disable-background-timer-throttling")
#         options.add_argument("--disable-backgrounding-occluded-windows")
#         options.add_argument("--disable-renderer-backgrounding")
#         options.add_argument("--disable-features=TranslateUI")
#         options.add_argument("--disable-ipc-flooding-protection")
#         options.add_argument("--user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36")
#         print("‚úÖ [DEBUG] Op√ß√µes do Chrome configuradas")
        
#         # Configura√ß√£o do servi√ßo usando webdriver-manager
#         print("üîß [DEBUG] Configurando servi√ßo do ChromeDriver com webdriver-manager...")
#         try:
#             # Usa o webdriver-manager para baixar automaticamente a vers√£o correta
#             print("üîß [DEBUG] Baixando/verificando ChromeDriver compat√≠vel...")
#             driver_path = ChromeDriverManager().install()
#             print(f"‚úÖ [DEBUG] ChromeDriver encontrado/baixado: {driver_path}")
#             service = Service(driver_path)
#         except Exception as e:
#             print(f"‚ö†Ô∏è [DEBUG] Erro com webdriver-manager: {str(e)}")
#             # Fallback para chromedriver local se existir
#             chromedriver_path = os.path.join(os.getcwd(), "chromedriver.exe")
#             if os.path.exists(chromedriver_path):
#                 print(f"üîß [DEBUG] Usando ChromeDriver local como fallback: {chromedriver_path}")
#                 service = Service(chromedriver_path)
#             else:
#                 print("‚ö†Ô∏è [DEBUG] Usando servi√ßo padr√£o como √∫ltimo recurso")
#                 service = Service()
        
#         print("‚úÖ [DEBUG] Servi√ßo configurado")
        
#         # Cria o driver
#         print("üîß [DEBUG] Criando inst√¢ncia do WebDriver...")
#         driver = webdriver.Chrome(service=service, options=options)
#         print("‚úÖ [DEBUG] WebDriver criado com sucesso")
        
#         # Configura√ß√µes adicionais
#         print("üîß [DEBUG] Aplicando configura√ß√µes adicionais...")
#         driver.set_page_load_timeout(30)
#         driver.implicitly_wait(10)
#         print("‚úÖ [DEBUG] Configura√ß√µes aplicadas")
        
#         return driver

def chrome():
    """Configura e retorna uma inst√¢ncia do Chrome WebDriver otimizada"""
    print("üöÄ [DEBUG] Iniciando configura√ß√£o do Chrome WebDriver...")
    
    # Configura√ß√µes de op√ß√µes do Chrome
    options = Options()
    options.add_argument("--headless")
    options.add_argument("--no-sandbox")
    options.add_argument("--disable-dev-shm-usage")
    options.add_argument("--disable-gpu")
    options.add_argument("--disable-web-security")
    options.add_argument("--disable-features=VizDisplayCompositor")
    options.add_argument("--remote-debugging-port=9222")
    options.add_argument("--window-size=1920,1080")
    
    # Detecta se est√° no ambiente local ou cloud
    local_env = is_local()
    print(f"üîß [DEBUG] Ambiente detectado: {'Local' if local_env else 'Streamlit Cloud'}")
    
    # Detecta vers√£o do Chrome instalada
    chrome_version, chrome_major = get_chrome_version()
    compatible_driver_version = get_compatible_chromedriver_version(chrome_version)
    
    driver = None
    
    try:
        if not local_env:
            # Configura√ß√£o espec√≠fica para Streamlit Cloud
            print("‚òÅÔ∏è [DEBUG] Configurando para Streamlit Cloud...")
            print(f"üîß [DEBUG] Chromium detectado: vers√£o {chrome_version if chrome_version else 'n√£o detectada'}")
            
            # Estrat√©gia 1: For√ßa vers√£o espec√≠fica compat√≠vel com Chromium 120
            try:
                if chrome_major and int(chrome_major) >= 120:
                    # Para Chromium 120+, for√ßa vers√£o espec√≠fica do ChromeDriver
                    target_version = "120.0.6099.109"  # Vers√£o compat√≠vel com Chromium 120
                    print(f"üîß [DEBUG] For√ßando ChromeDriver vers√£o {target_version} para Chromium {chrome_major}")
                    driver_path = ChromeDriverManager(version=target_version).install()
                else:
                    # Fallback para vers√£o autom√°tica se n√£o conseguir detectar
                    print("üîß [DEBUG] Usando vers√£o autom√°tica como fallback...")
                    driver_path = ChromeDriverManager().install()
                
                service = Service(driver_path)
                driver = webdriver.Chrome(service=service, options=options)
                print("‚úÖ [DEBUG] ChromeDriver espec√≠fico configurado com sucesso!")
                return driver
                
            except Exception as e:
                print(f"‚ö†Ô∏è [DEBUG] Falha com vers√£o espec√≠fica: {str(e)}")
                
                # Estrat√©gia 2: Tenta vers√µes conhecidas compat√≠veis
                compatible_versions = ["120.0.6099.109", "119.0.6045.105", "118.0.5993.70"]
                for version in compatible_versions:
                    try:
                        print(f"üîß [DEBUG] Tentando ChromeDriver vers√£o {version}...")
                        driver_path = ChromeDriverManager(version=version).install()
                        service = Service(driver_path)
                        driver = webdriver.Chrome(service=service, options=options)
                        print(f"‚úÖ [DEBUG] ChromeDriver vers√£o {version} funcionou!")
                        return driver
                    except Exception as ve:
                        print(f"‚ö†Ô∏è [DEBUG] Vers√£o {version} falhou: {str(ve)}")
                        continue
                
                # Estrat√©gia 3: Configura√ß√£o de emerg√™ncia
                print("üÜò [DEBUG] Tentando configura√ß√£o de emerg√™ncia...")
                options.add_argument("--disable-extensions")
                options.add_argument("--disable-plugins")
                options.add_argument("--disable-images")
                options.add_argument("--disable-javascript")
                
                try:
                    driver = webdriver.Chrome(options=options)
                    print("‚úÖ [DEBUG] Configura√ß√£o de emerg√™ncia funcionou!")
                    return driver
                except Exception as e4:
                    print(f"‚ùå [DEBUG] Configura√ß√£o de emerg√™ncia falhou: {str(e4)}")
                    raise e4
        
        else:
            # Configura√ß√£o para ambiente local
            print("üè† [DEBUG] Configurando para ambiente local...")
            
            # Estrat√©gia 1: Detecta vers√£o mas usa ChromeDriverManager autom√°tico
            if compatible_driver_version:
                print(f"üîß [DEBUG] Vers√£o detectada: {compatible_driver_version}, usando ChromeDriverManager autom√°tico...")
            
            # Estrat√©gia 2: Tenta usar driver local primeiro
            if os.path.exists("chromedriver.exe"):
                try:
                    print("üîß [DEBUG] Usando ChromeDriver local...")
                    service = Service("chromedriver.exe")
                    driver = webdriver.Chrome(service=service, options=options)
                    print("‚úÖ [DEBUG] ChromeDriver local configurado com sucesso!")
                    return driver
                except Exception as e:
                    print(f"‚ö†Ô∏è [DEBUG] Falha com driver local: {str(e)}")
            
            # Estrat√©gia 3: Usa ChromeDriverManager para ambiente local
            try:
                print("üîß [DEBUG] Baixando ChromeDriver via ChromeDriverManager...")
                driver_path = ChromeDriverManager().install()
                service = Service(driver_path)
                driver = webdriver.Chrome(service=service, options=options)
                print("‚úÖ [DEBUG] ChromeDriver baixado e configurado com sucesso!")
                return driver
            except Exception as e:
                print(f"‚ùå [DEBUG] Falha com ChromeDriverManager: {str(e)}")
                raise e
                
    except Exception as e:
        print(f"‚ùå [DEBUG] Erro cr√≠tico na configura√ß√£o do Chrome: {str(e)}")
        if driver:
            try:
                driver.quit()
            except:
                pass
        raise e

    # except Exception as e:
    #     print(f"‚ùå [DEBUG] ERRO na configura√ß√£o do Chrome: {str(e)}")
    #     raise e

class SEILogin:
    def __init__(self, base_url="https://sei.al.gov.br"):
        self.base_url = base_url
        self.driver = None
    
    def setup_driver(self):
        """Configura o driver do Chrome usando a fun√ß√£o chrome() otimizada"""
        print("üîß [DEBUG] Iniciando setup_driver...")
        try:
            self.driver = chrome()
            print("‚úÖ [DEBUG] Driver configurado com sucesso no setup_driver")
            return self.driver
        except Exception as e:
            print(f"‚ùå [DEBUG] ERRO no setup_driver: {str(e)}")
            raise e
    
    def login(self, cpf, senha, unidade="GOVERNANCA"):
        """Realiza o login no sistema SEI de forma simplificada"""
        print(f"üîß [DEBUG] Iniciando login para usu√°rio: {cpf}")
        print(f"üîß [DEBUG] Unidade: {unidade}")
        print(f"üîß [DEBUG] URL base: {self.base_url}")
        
        try:
            # Configura o driver
            print("üîß [DEBUG] Configurando driver...")
            self.setup_driver()
            print("‚úÖ [DEBUG] Driver configurado com sucesso")
            
            # Navega para a p√°gina de login
            print(f"üîß [DEBUG] Navegando para: {self.base_url}")
            try:
                self.driver.get(self.base_url)
                print("‚úÖ [DEBUG] Navega√ß√£o bem-sucedida")
            except TimeoutException:
                print("‚ùå [DEBUG] TIMEOUT: P√°gina demorou muito para carregar")
                self.close()
                return {
                    "sucesso": False,
                    "erro": "Timeout: P√°gina demorou muito para carregar"
                }
            except Exception as e:
                print(f"‚ùå [DEBUG] ERRO na navega√ß√£o: {str(e)}")
                self.close()
                return {
                    "sucesso": False,
                    "erro": f"Erro na navega√ß√£o: {str(e)}"
                }
            
            # Aguarda a p√°gina carregar
            print("üîß [DEBUG] Aguardando p√°gina carregar...")
            wait = WebDriverWait(self.driver, 30)
            try:
                wait.until(EC.presence_of_element_located((By.TAG_NAME, "form")))
                print("‚úÖ [DEBUG] Formul√°rio encontrado na p√°gina")
            except TimeoutException:
                print("‚ùå [DEBUG] TIMEOUT: Formul√°rio n√£o encontrado")
                print(f"üîß [DEBUG] URL atual: {self.driver.current_url}")
                print(f"üîß [DEBUG] T√≠tulo da p√°gina: {self.driver.title}")
                self.close()
                return {
                    "sucesso": False,
                    "erro": "Timeout: Formul√°rio n√£o encontrado na p√°gina"
                }
            
            print("üîß [DEBUG] Aguardando 2 segundos...")
            time.sleep(2)
            print(f"üîß [DEBUG] URL atual ap√≥s carregamento: {self.driver.current_url}")
            
            # Preenche campo de usu√°rio
            print("üîß [DEBUG] Procurando campo de usu√°rio...")
            try:
                campo_usuario = wait.until(EC.element_to_be_clickable((By.ID, "txtUsuario")))
                print("‚úÖ [DEBUG] Campo de usu√°rio encontrado")
                campo_usuario.clear()
                campo_usuario.send_keys(cpf)
                print(f"‚úÖ [DEBUG] Usu√°rio '{cpf}' preenchido")
            except TimeoutException:
                print("‚ùå [DEBUG] TIMEOUT: Campo de usu√°rio n√£o encontrado")
                self.close()
                return {
                    "sucesso": False,
                    "erro": "Campo de usu√°rio n√£o encontrado"
                }
            except Exception as e:
                print(f"‚ùå [DEBUG] ERRO ao preencher usu√°rio: {str(e)}")
                self.close()
                return {
                    "sucesso": False,
                    "erro": f"Erro ao preencher usu√°rio: {str(e)}"
                }
            
            # Preenche campo de senha
            print("üîß [DEBUG] Procurando campo de senha...")
            try:
                campo_senha = wait.until(EC.element_to_be_clickable((By.ID, "pwdSenha")))
                print("‚úÖ [DEBUG] Campo de senha encontrado")
                campo_senha.clear()
                campo_senha.send_keys(senha)
                print("‚úÖ [DEBUG] Senha preenchida")
            except TimeoutException:
                print("‚ùå [DEBUG] TIMEOUT: Campo de senha n√£o encontrado")
                self.close()
                return {
                    "sucesso": False,
                    "erro": "Campo de senha n√£o encontrado"
                }
            except Exception as e:
                print(f"‚ùå [DEBUG] ERRO ao preencher senha: {str(e)}")
                self.close()
                return {
                    "sucesso": False,
                    "erro": f"Erro ao preencher senha: {str(e)}"
                }
            
            # Seleciona unidade
            print(f"üîß [DEBUG] Procurando campo de unidade para selecionar: {unidade}")
            try:
                select_unidade = wait.until(EC.element_to_be_clickable((By.ID, "selOrgao")))
                print("‚úÖ [DEBUG] Campo de unidade encontrado")
                select_obj = Select(select_unidade)
                
                # Lista todas as op√ß√µes dispon√≠veis para debug
                opcoes = [option.text for option in select_obj.options]
                print(f"üîß [DEBUG] Op√ß√µes dispon√≠veis: {opcoes}")
                
                # Procura pela unidade
                unidade_encontrada = False
                for option in select_obj.options:
                    if unidade.upper() in option.text.upper():
                        select_obj.select_by_value(option.get_attribute("value"))
                        unidade_encontrada = True
                        print(f"‚úÖ [DEBUG] Unidade '{unidade}' selecionada")
                        break
                
                if not unidade_encontrada:
                    print(f"‚ùå [DEBUG] Unidade '{unidade}' n√£o encontrada nas op√ß√µes")
                    self.close()
                    return {
                        "sucesso": False,
                        "erro": f"N√£o foi poss√≠vel selecionar a unidade '{unidade}'"
                    }
            except TimeoutException:
                print("‚ùå [DEBUG] TIMEOUT: Campo de unidade n√£o encontrado")
                self.close()
                return {
                    "sucesso": False,
                    "erro": "Campo de unidade n√£o encontrado"
                }
            except Exception as e:
                print(f"‚ùå [DEBUG] ERRO ao selecionar unidade: {str(e)}")
                self.close()
                return {
                    "sucesso": False,
                    "erro": f"Erro ao selecionar unidade '{unidade}': {str(e)}"
                }
            
            # Submete o formul√°rio
            print("üîß [DEBUG] Procurando bot√£o de login...")
            try:
                botao_login = wait.until(EC.element_to_be_clickable((By.ID, "sbmAcessar")))
                print("‚úÖ [DEBUG] Bot√£o de login encontrado")
                botao_login.click()
                print("‚úÖ [DEBUG] Bot√£o de login clicado")
            except TimeoutException:
                print("‚ùå [DEBUG] TIMEOUT: Bot√£o de login n√£o encontrado")
                self.close()
                return {
                    "sucesso": False,
                    "erro": "Bot√£o de login n√£o encontrado"
                }
            except Exception as e:
                print(f"‚ùå [DEBUG] ERRO ao clicar no bot√£o de login: {str(e)}")
                self.close()
                return {
                    "sucesso": False,
                    "erro": f"N√£o foi poss√≠vel submeter o formul√°rio: {str(e)}"
                }
            
            # Aguarda o redirecionamento ap√≥s login
            print("üîß [DEBUG] Aguardando redirecionamento ap√≥s login...")
            time.sleep(3)
            
            # Verifica se h√° alerta de usu√°rio/senha inv√°lida
            try:
                alert = self.driver.switch_to.alert
                alert_text = alert.text
                print(f"üîß [DEBUG] Alerta detectado: {alert_text}")
                alert.accept()
                
                if "Usu√°rio ou Senha Inv√°lida" in alert_text or "usu√°rio ou senha" in alert_text.lower():
                    print("‚ùå [DEBUG] Login falhou - Usu√°rio ou Senha Inv√°lida")
                    self.close()
                    return {
                        "sucesso": False,
                        "erro": "Usu√°rio ou Senha Inv√°lida"
                    }
                else:
                    print(f"‚ùå [DEBUG] Login falhou - Erro de autentica√ß√£o: {alert_text}")
                    self.close()
                    return {
                        "sucesso": False,
                        "erro": f"Erro de autentica√ß√£o: {alert_text}"
                    }
            except:
                # N√£o h√° alerta, continua verifica√ß√£o normal
                print("üîß [DEBUG] Nenhum alerta detectado, continuando verifica√ß√£o...")
                pass
            
            # Verifica se o login foi bem-sucedido
            url_atual = self.driver.current_url
            print(f"üîß [DEBUG] URL atual ap√≥s login: {url_atual}")
            print(f"üîß [DEBUG] T√≠tulo da p√°gina: {self.driver.title}")
            
            if "controlador.php" in url_atual or "principal.php" in url_atual:
                print("‚úÖ [DEBUG] Login realizado com sucesso!")
                return {
                    "sucesso": True,
                    "mensagem": "Login realizado com sucesso!"
                }
            
            # Se chegou at√© aqui, login falhou
            print("‚ùå [DEBUG] Login falhou - URL n√£o cont√©m 'controlador.php' ou 'principal.php'")
            # Verifica se h√° mensagem de erro na p√°gina
            try:
                erro_element = self.driver.find_element(By.CLASS_NAME, "infraMensagem")
                mensagem_erro = erro_element.text
                print(f"üîß [DEBUG] Mensagem de erro encontrada: {mensagem_erro}")
            except Exception as e:
                mensagem_erro = "Login falhou - credenciais inv√°lidas ou erro no sistema"
                print("üîß [DEBUG] Nenhuma mensagem de erro espec√≠fica encontrada")
            
            return {
                "sucesso": False,
                "erro": mensagem_erro
            }
                    
        except TimeoutException:
            self.close()
            return {
                "sucesso": False,
                "erro": "Timeout: P√°gina demorou muito para carregar"
            }
        except UnexpectedAlertPresentException:
            try:
                alert = self.driver.switch_to.alert
                alert_text = alert.text
                alert.accept()
                
                if "Usu√°rio ou Senha Inv√°lida" in alert_text or "usu√°rio ou senha" in alert_text.lower():
                    self.close()
                    return {
                        "sucesso": False,
                        "erro": "Usu√°rio ou Senha Inv√°lida"
                    }
                else:
                    self.close()
                    return {
                        "sucesso": False,
                        "erro": f"Erro de autentica√ß√£o: {alert_text}"
                    }
            except:
                self.close()
                return {
                    "sucesso": False,
                    "erro": "Usu√°rio ou Senha Inv√°lida"
                }
        except Exception as e:
            # Erro geral
            print(f"‚ùå [DEBUG] ERRO GERAL no m√©todo login: {str(e)}")
            print(f"üîß [DEBUG] Tipo do erro: {type(e).__name__}")
            self.close()
            return {
                "sucesso": False,
                "erro": f"Erro durante o login: {str(e)}"
            }
    
    def close(self):
        """Fecha o navegador"""
        print("üîß [DEBUG] Iniciando fechamento do driver...")
        if hasattr(self, 'driver') and self.driver:
            try:
                print("üîß [DEBUG] Fechando driver...")
                self.driver.quit()
                print("‚úÖ [DEBUG] Driver fechado com sucesso")
            except Exception as e:
                print(f"‚ö†Ô∏è [DEBUG] Erro ao fechar driver: {str(e)}")
                pass
            finally:
                self.driver = None
                print("üîß [DEBUG] Refer√™ncia do driver removida")
        else:
            print("üîß [DEBUG] Nenhum driver para fechar")
    
    def __del__(self):
        """Destrutor - garante que o driver seja fechado"""
        print("üîß [DEBUG] Destrutor chamado - fechando driver...")
        self.close()