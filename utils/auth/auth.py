import streamlit as st

from src.base import (
    func_load_base_cpof,
    func_load_historico_cpof,
    func_load_base_credito_sop_geo,
    func_load_historico_credito_sop_geo
)

def controle_sessao():
    """
    Inicializa as vari√°veis de sess√£o necess√°rias para o controle de autentica√ß√£o.
    """
    if "logged_in" not in st.session_state:
        st.session_state.logged_in = False
    if "username" not in st.session_state:
        st.session_state.username = ""
    if "page_access" not in st.session_state:
        st.session_state.page_access = []
    if "selected_page" not in st.session_state:
        st.session_state.selected_page = "üè† Home"

def login(username, password):
    """
    Verifica as credenciais do usu√°rio e retorna as permiss√µes de acesso.

    Args:
        username (str): Nome de usu√°rio
        password (str): Senha do usu√°rio

    Returns:
        list: Lista de p√°ginas que o usu√°rio tem permiss√£o para acessar, ou None se as credenciais forem inv√°lidas
    """
    users = st.secrets["users"]
    page_access = st.secrets["page_access"]

    if username in users and users[username] == password:
        return page_access.get(username, [])
    return None

def verificar_permissao():
    """
    Verifica se o usu√°rio est√° autenticado e possui permiss√£o para acessar a p√°gina atual.

    Esta fun√ß√£o realiza duas verifica√ß√µes:
    1. Se o usu√°rio n√£o est√° autenticado (n√£o existe ou est√° falso o estado 'logged_in' na sess√£o),
        redireciona para a p√°gina de login.
    2. Se o usu√°rio n√£o possui permiss√£o de acesso √† p√°gina (estado 'page_access' ausente ou inv√°lido na sess√£o),
        exibe uma mensagem de erro e interrompe a execu√ß√£o da p√°gina.

    Requer que o m√≥dulo Streamlit (`st`) esteja importado e que o estado da sess√£o esteja corretamente configurado.
    """

    if "logged_in" not in st.session_state or not st.session_state.logged_in:
        st.switch_page("pages/login.py")

    if "page_access" not in st.session_state or not st.session_state.page_access:
        st.error("üö´ Voc√™ n√£o tem permiss√£o para acessar esta p√°gina.")
        st.switch_page("pages/Home.py")
        st.stop()
# Construir um mapeamento de usu√°rios e suas permiss√µes


def carregar_base_por_usuario(
    titulo_selectbox="Selecione a base de dados:",
    chave_selectbox="base_selectbox",
    forcar_recarregar=False,
    apenas_historico=False,
):
    """
    Carrega a base de dados apropriada com base no usu√°rio logado e nas permiss√µes definidas em secrets.toml.
    Permite for√ßar recarregamento do Google Sheets.
    Retorna o DataFrame j√° armazenado em session_state pelo base.py.
    """


    # Mapeamento do nome da base para a fun√ß√£o de carregamento e chave do session_state
    bases = {
        "Base CPOF": {"func": func_load_base_cpof, "session_key": "base_cpof"},
        "Hist√≥rico CPOF": {"func": func_load_historico_cpof, "session_key": "historico_cpof"},
        "Base Cr√©dito SOP/GEO": {"func": func_load_base_credito_sop_geo, "session_key": "base_creditos_sop_geo"},
        "Hist√≥rico Cr√©dito SOP/GEO": {"func": func_load_historico_credito_sop_geo, "session_key": "historico_credito_sop_geo"}
    }
    historico_map = {
        "Base CPOF": "Hist√≥rico CPOF",
        "Base Cr√©dito SOP/GEO": "Hist√≥rico Cr√©dito SOP/GEO",
        "Hist√≥rico CPOF": "Hist√≥rico CPOF",
        "Hist√≥rico Cr√©dito SOP/GEO": "Hist√≥rico Cr√©dito SOP/GEO"
    }

    if "username" not in st.session_state or not st.session_state.username:
        st.error("Usu√°rio n√£o est√° logado.")
        return None, "Nenhuma base carregada", None

    username = st.session_state.username
    base_access = st.secrets.get("base_access", {})
    bases_permitidas = base_access.get(username, [])

    if not bases_permitidas:
        st.error(f"Usu√°rio {username} n√£o tem permiss√£o para acessar nenhuma base de dados.")
        return None, "Nenhuma base carregada", None

    if len(bases_permitidas) >= 4:
        nome_base_selecionada = st.selectbox(
            titulo_selectbox,
            bases_permitidas,
            key=chave_selectbox
        )
    else:
        nome_base_selecionada = bases_permitidas[0]

    # Busca a fun√ß√£o e a chave do session_state correspondente
    base_info = bases.get(nome_base_selecionada)
    if base_info is None:
        st.error(f"Fun√ß√£o de carregamento n√£o encontrada para a base '{nome_base_selecionada}'.")
        return None, nome_base_selecionada, None

    # Chama a fun√ß√£o de carregamento (ela j√° gerencia o session_state internamente)
    base_info["func"](forcar_recarregar=forcar_recarregar)

    # Retorna o DataFrame diretamente do session_state, conforme definido em base.py
    base_dados = st.session_state.get(base_info["session_key"], None).copy()

    if base_dados is None:
        st.error(f"Erro ao carregar a base '{nome_base_selecionada}'.")
        return None, nome_base_selecionada, None
    
    if apenas_historico: # ADICIONAR AQUI L√ìGICA DE ESCOLHER QUAL BASE HIST√ìRICO CARREGAR, IMPEDINDO QUE SEJA SELECIONADO ATRAV√âS DO SELECTBOX AS BASES QUE N√ÉO SEJAM HIST√ìRICAS
        return base_dados, nome_base_selecionada, None

    nome_base_historica = historico_map.get(nome_base_selecionada, None)
    return base_dados, nome_base_selecionada, nome_base_historica