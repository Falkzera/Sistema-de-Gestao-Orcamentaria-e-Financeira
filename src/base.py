import streamlit as st

from streamlit_gsheets import GSheetsConnection

def func_load_base_cpof(forcar_recarregar=False):
    if "base" not in st.session_state or forcar_recarregar:
        conn = st.connection("gsheets", type=GSheetsConnection)
        base = conn.read(worksheet="Base CPOF", ttl=300)
        base["Fonte de Recursos"] = base["Fonte de Recursos"].astype(str)
        base["Grupo de Despesas"] = base["Grupo de Despesas"].astype(str)
        base["NÂº do Processo"] = base["NÂº do Processo"].astype(str).str.strip()
        base["NÂº ATA"] = base["NÂº ATA"].astype(str)
        base["NÂº ATA"] = base["NÂº ATA"].str.replace('0.', '', regex=False)
        base["NÂº ATA"] = base["NÂº ATA"].str.replace('Sem InformaÃ§Ã£o', '', regex=False)
        base["NÂº ATA"] = base["NÂº ATA"].str.replace('nan', '', regex=False)

        st.session_state.base_cpof = base

    return st.session_state.base_cpof

def func_load_historico_cpof(forcar_recarregar=False):
    if "historico" not in st.session_state or forcar_recarregar:
        conn = st.connection("gsheets", type=GSheetsConnection)
        base = conn.read(worksheet="HistÃ³rico CPOF", ttl=300)
        st.session_state.historico_cpof = base
    
    return st.session_state.historico_cpof

def func_load_base_credito_sop_geo(forcar_recarregar=False):
    
    if "base" not in st.session_state or forcar_recarregar:
        try:
            conn = st.connection("gsheets", type=GSheetsConnection)
            base = conn.read(worksheet="Base CrÃ©dito SOP/GEO", ttl=300)

        except Exception as e:
            st.info("Verifique a conexÃ£o com a Internet ðŸ›œ e recarregue a pÃ¡gina")
            print(f"Log de erro: {e}")
            st.stop()

        base["Fonte de Recursos"] = base["Fonte de Recursos"].astype(str)
        base["Grupo de Despesas"] = base["Grupo de Despesas"].astype(str)
        base["NÂº do decreto"] = base["NÂº do decreto"].astype(str)
        base["NÂº do Processo"] = base["NÂº do Processo"].astype(str).str.strip()
        base["NÂº do decreto"] = base["NÂº do decreto"].str.replace('.0', '', regex=False)
        base["NÂº do decreto"] = base["NÂº do decreto"].str.replace('nan', '', regex=False)
        base["NÂº do decreto"] = base["NÂº do decreto"].fillna('')
        base["NÂº ATA"] = base["NÂº ATA"].astype(str)
        base["NÂº ATA"] = base["NÂº ATA"].str.replace('0.', '', regex=False)
        base["NÂº ATA"] = base["NÂº ATA"].str.replace('nan', '', regex=False)
        # converter em datetime
        base = base[['SituaÃ§Ã£o', 'NÂº do Processo', 'Origem de Recursos', 'Ã“rgÃ£o (UO)', 'Fonte de Recursos', 'Grupo de Despesas',  'Tipo de CrÃ©dito', 'Valor', 'Objetivo', 'ObservaÃ§Ã£o', 'OpniÃ£o SOP', 'Data de Recebimento',	'Data de PublicaÃ§Ã£o', 'NÂº do decreto', 'NÂº ATA','Contabilizar no Limite?', 'Cadastrado Por',	'Ãšltima EdiÃ§Ã£o']]
        st.session_state.base_creditos_sop_geo = base

    return st.session_state.base_creditos_sop_geo

def func_load_historico_credito_sop_geo(forcar_recarregar=False):
    if "historico" not in st.session_state or forcar_recarregar:
        conn = st.connection("gsheets", type=GSheetsConnection)
        base = conn.read(worksheet="HistÃ³rico CrÃ©dito SOP/GEO", ttl=300)
        base["Fonte de Recursos"] = base["Fonte de Recursos"].astype(str)
        st.session_state.historico_credito_sop_geo = base

    return st.session_state.historico_credito_sop_geo

def func_load_base_ted(forcar_recarregar=False):
    if "base" not in st.session_state or forcar_recarregar:
        conn = st.connection("gsheets", type=GSheetsConnection)
        base = conn.read(worksheet="Base TED", ttl=300)
        base["Fonte de Recursos"] = base["Fonte de Recursos"].astype(str)

        st.session_state.base_ted = base

    return st.session_state.base_ted

def func_load_historico_ted(forcar_recarregar=False):
    if "historico" not in st.session_state or forcar_recarregar:
        conn = st.connection("gsheets", type=GSheetsConnection)
        base = conn.read(worksheet="HistÃ³rico TED", ttl=300)
        st.session_state.historico_ted = base

    return st.session_state.historico_ted

def func_load_base_sop_geral(forcar_recarregar=False):
    if "base" not in st.session_state or forcar_recarregar:
        conn = st.connection("gsheets", type=GSheetsConnection)
        base = conn.read(worksheet="Base SOP/GERAL", ttl=300)

        st.session_state.base_sop_geral = base

    return st.session_state.base_sop_geral

def func_load_historico_sop_geral(forcar_recarregar=False):
    if "historico" not in st.session_state or forcar_recarregar:
        conn = st.connection("gsheets", type=GSheetsConnection)
        base = conn.read(worksheet="HistÃ³rico SOP/GERAL", ttl=300)
        st.session_state.historico_sop_geral = base

    return st.session_state.historico_sop_geral