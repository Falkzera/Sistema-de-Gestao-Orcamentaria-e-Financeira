import streamlit as st
import pandas as pd

from datetime import datetime
from src.base import load_base_data
from utils.digitacao.digitacao import (
    digitacao,
    titulo_dinamico,
    por_extenso,
    por_extenso_reais,
    mes_por_extenso,
    gerar_relatorio_origem_recurso_com_graficos,
)

from utils.formatar.formatar_valor import formatar_valor, formatar_valor2
from utils.digitacao.digitacao import mostrar_tabela_pdf
from utils.calculo_limite.limite import calcular_limite_atual
from utils.digitacao.digitacao import gerar_grafico_pizza

load_base_data()

with st.container(): # C√ÅLCULO DO LIMITE (retirado de utils/calculo_limite/limite.py)
    limite = calcular_limite_atual()
    VALOR_UTILIZADO_LIMITE = limite["valor_utilizado"]
    VALOR_DO_LIMITE = limite["valor_limite"]
    OR√áAMENTO_APROVADO_2025 = limite["orcamento_aprovado"]

with st.container():  # LIMPAR A SESS√ÉO PARA OS GR√ÅFICOS E TABELS

    # üîÅ Limpa conte√∫do acumulado (se n√£o estiver gerando PDF)
    if "conteudo_pdf" in st.session_state and not st.session_state.get("gerando_pdf", False):
        del st.session_state["conteudo_pdf"]

    # üîÅ Reseta contador de quadros e gr√°ficos (sem depender de 'if')
    if not st.session_state.get("gerando_pdf", False):
        st.session_state["contador_quadro"] = 1
        st.session_state["contador_grafico"] = 1

with st.container():  # ALOCA√á√ÉO DO DATAFRAME
    df = pd.DataFrame(st.session_state.base)

# 1Ô∏è‚É£ Filtro reutiliz√°vel de ano e m√™s
def filtro_ano_mes(df: pd.DataFrame, exibir_na_tela=True, key_prefix="filtro"):
    hoje = datetime.today()
    mes_padrao = hoje.month - 1 if hoje.month > 1 else 12
    ano_padrao = hoje.year if hoje.month > 1 else hoje.year - 1

    df['Data de Recebimento'] = pd.to_datetime(df['Data de Recebimento'], format='%d/%m/%Y')
    df['Ano'] = df['Data de Recebimento'].dt.year
    df['M√™s'] = df['Data de Recebimento'].dt.month

    anos_disponiveis = sorted(df['Ano'].unique())
    meses_disponiveis = sorted(df['M√™s'].unique())

    if exibir_na_tela:
        col1, col2 = st.columns(2)
        ano = col1.selectbox(
            "Selecione o Ano",
            anos_disponiveis,
            index=anos_disponiveis.index(ano_padrao),
            key=f"{key_prefix}_ano"
        )
        mes = col2.selectbox(
            "Selecione o M√™s",
            meses_disponiveis,
            index=meses_disponiveis.index(mes_padrao),
            key=f"{key_prefix}_mes",
            format_func=mes_por_extenso
        )
    else:
        ano = st.session_state.get(f"{key_prefix}_ano", ano_padrao)
        mes = st.session_state.get(f"{key_prefix}_mes", mes_padrao)

    df_filtrado = df[(df['Ano'] == ano) & (df['M√™s'] == mes)].copy()
    df_mes_anterior = df[
        (df['Ano'] == (ano if mes > 1 else ano - 1)) &
        (df['M√™s'] == (mes - 1 if mes > 1 else 12))
    ].copy()

    return ano, mes, df_filtrado, df_mes_anterior

ano, mes, df_filtrado, df_filtrado_mes_anterior = filtro_ano_mes(df, exibir_na_tela=False, key_prefix="home")

with st.container():  # CONSTRU√á√ÉO DE M√âTRICAS INICIAIS

    QUANTIDADE_DE_PROCESSOS = df_filtrado.shape[0]
    mes_anterior = df_filtrado_mes_anterior['M√™s'].unique()[0] if not df_filtrado_mes_anterior.empty else None

def montar_relatorio_cpof(ano, mes, df_filtrado, df_filtrado_mes_anterior):

    titulo_dinamico(f"# Relat√≥rio de {mes_por_extenso(mes)} / {ano}")

    with st.container():  # 1 - INTRODU√á√ÉO
            
        titulo_dinamico(f"## 1 - Introdu√ß√£o")

        digitacao(
            '''O or√ßamento √© um produto do Sistema de Planejamento, que determina as a√ß√µes que ser√£o 
            desenvolvidas em um determinado exerc√≠cio. Ele abrange a manuten√ß√£o das atividades do Estado, 
            o planejamento e a execu√ß√£o dos projetos estabelecidos nos planos e programas de Governo.'''
        )

        digitacao(
            '''Durante a implementa√ß√£o dos programas de trabalho, podem ocorrer situa√ß√µes ou fatos novos
            que n√£o foram previstos na fase de elabora√ß√£o da pe√ßa or√ßament√°ria e que exigem a atua√ß√£o do
            Poder P√∫blico. Desta forma, os cr√©ditos adicionais constituem-se em procedimentos previstos
            na Constitui√ß√£o Federal e na Lei 4.320/64 para corrigir ou amenizar situa√ß√µes que surgem
            durante a execu√ß√£o or√ßament√°ria, por raz√µes de fatos de ordem econ√¥mica ou imprevis√≠veis.'''
        )

        digitacao(
            f'''Este relat√≥rio tem por objetivo compreender as altera√ß√µes or√ßament√°rias realizadas pelos
            √≥rg√£os do Poder Executivo, com base na Lei 4.320/64, Lei N¬∞ 9.454/2025 e Decreto N¬∫ 100.553/2025. 
            Os dados abaixo s√£o referentes aos processos de solicita√ß√µes de cr√©ditos adicionais abertos por cada
            √≥rg√£o do estado no per√≠odo de {mes_por_extenso(mes)} de {ano}. Nesse relat√≥rio tamb√©m foram inclu√≠das
            informa√ß√µes sobre as Emendas Parlamentares Impositivas, al√©m da atualiza√ß√£o do Limite de Cr√©dito.'''
        )

        qtd_processos = df_filtrado.shape[0]
        qtd_processos_sem_cobertura = df_filtrado[df_filtrado['Origem de Recursos'].str.startswith('Sem Cobertura')].shape[0]

        qtd_processos_com_cobertura = df_filtrado[~df_filtrado['Origem de Recursos'].str.startswith('Sem Cobertura')].shape[0]

        digitacao(
            f'''No m√™s de {mes_por_extenso(mes)} foram solicitados {qtd_processos} ({por_extenso(qtd_processos)}) processos de cr√©ditos
            adicionais, destes sendo, {qtd_processos_com_cobertura} ({por_extenso(qtd_processos_com_cobertura)}) com cobertura e {qtd_processos_sem_cobertura} ({por_extenso(qtd_processos_sem_cobertura)}) sem cobertura
            or√ßament√°ria. Contidas nestes processos, as solicita√ß√µes de cr√©dito se dividem conforme o gr√°fico
            abaixo:'''
        )

        gerar_grafico_pizza(
            labels=["Com Cobertura", "Sem Cobertura"],
            values=[qtd_processos_com_cobertura, qtd_processos_sem_cobertura],
            cores=["#095AA2", "#E0E0E0"],
            titulo_pdf="Distribui√ß√£o por Tipo de Solicita√ß√£o de Cr√©dito"
        )

        qtd_processos_valores = df_filtrado['Valor'].sum()
        qtd_processos_valores_mes_anterior = df_filtrado_mes_anterior['Valor'].sum()
        diferenca = qtd_processos_valores - qtd_processos_valores_mes_anterior
        maior_que_atual = qtd_processos_valores - qtd_processos_valores_mes_anterior

        digitacao(
            f'''Estes cr√©ditos adicionais, comp√µem o valor total solicitado de {formatar_valor(qtd_processos_valores)} ({por_extenso_reais(qtd_processos_valores)}). 
            Uma diferen√ßa de {formatar_valor(abs(diferenca))} ({por_extenso_reais(abs(diferenca))})
            {'a mais' if maior_que_atual > 0 else 'a menos'}, em rela√ß√£o ao m√™s anterior de {mes_por_extenso(mes_anterior)}, a qual
            teve um total de solicita√ß√µes de {formatar_valor(qtd_processos_valores_mes_anterior)} ({por_extenso_reais(qtd_processos_valores_mes_anterior)}).'''
        )

    with st.container():  # 2 - CR√âDITOS ADICIONAIS
            
        titulo_dinamico(f"## 2 - Cr√©ditos Adicionais")
        digitacao(
            f'''A abertura de um cr√©dito adicional √© formalizada por um Decreto do Executivo, por√©m,
            depende de pr√©via autoriza√ß√£o legislativa (Lei Federal n¬∫ 4.320/64, art. 42).
            Esta se√ß√£o √© dedicada a an√°lise descritiva e estat√≠stica dos processos de cr√©ditos adicionais
            que passaram por esta ger√™ncia de execu√ß√£o or√ßament√°ria durante o m√™s de {mes_por_extenso(mes)} de {ano}.
            Para este fim, ser√£o utilizados os dados referentes aos processos de solicita√ß√£o de altera√ß√£o
            or√ßament√°ria advindos do SEI e do SIAFE, sendo estes dados tabulados de forma estruturada e
            tratada para as an√°lises.'''
        )
        titulo_dinamico(f"### 2.1 - Cr√©ditos Especiais")

        digitacao(
            '''De acordo com o do Art. 41, inciso II, e Art. 42 da Lei N¬∫4.320, de 1964, s√£o aqueles destinados
            √†s despesas que n√£o foram previstas na Lei Or√ßament√°ria Anual - LOA, e para a qual n√£o existe
            dota√ß√£o or√ßament√°ria espec√≠fica. De modo, que sua abertura se faz por meio de decreto do executivo,
            mas sua autoriza√ß√£o se d√° atrav√©s de Lei espec√≠fica, diferente dos cr√©ditos suplementares que s√£o
            previstos na LOA e abertos por decretos executivos.
            Assim, n√£o h√° uma dota√ß√£o que se pretende refor√ßar, mas sim a cria√ß√£o de despesa. √â o caso,
            por exemplo, da cria√ß√£o de uma a√ß√£o por um √ìrg√£o cuja dota√ß√£o n√£o estava prevista no texto da LOA.'''
        )

        if df_filtrado[df_filtrado['Tipo de Cr√©dito'] == 'Especial'].shape[0] == 0:
            digitacao(
                f'''No m√™s de {mes_por_extenso(mes)}, n√£o houve solicita√ß√£o de nenhum cr√©dito especial.'''
            )
        else:
            digitacao(
                '''Os cr√©ditos especiais s√£o aqueles destinados a despesas que n√£o foram previstas na Lei Or√ßament√°ria
                Anual - LOA, e para a qual n√£o existe dota√ß√£o or√ßament√°ria espec√≠fica. De modo, que sua abertura se faz
                por meio de decreto do executivo, mas sua autoriza√ß√£o se d√° atrav√©s de Lei espec√≠fica, diferente dos
                cr√©ditos suplementares que s√£o previstos na LOA e abertos por decretos executivos. Assim, n√£o h√° uma
                dota√ß√£o que se pretende refor√ßar, mas sim a cria√ß√£o de despesa. √â o caso, por exemplo, da cria√ß√£o de
                uma a√ß√£o por um √ìrg√£o cuja dota√ß√£o n√£o estava prevista no texto da LOA.'''
            )

            orgaos_creditos_especiais = df_filtrado[df_filtrado['Tipo de Cr√©dito'] == 'Especial'].groupby('√ìrg√£o (UO)').size()

            for orgao, qtd in orgaos_creditos_especiais.items():
                valor_total = df_filtrado[(df_filtrado['Tipo de Cr√©dito'] == 'Especial') & (df_filtrado['√ìrg√£o (UO)'] == orgao)]['Valor'].sum()
                objetivos = df_filtrado[(df_filtrado['Tipo de Cr√©dito'] == 'Especial') & (df_filtrado['√ìrg√£o (UO)'] == orgao)]['Objetivo'].unique()
                objetivos_texto = ', '.join(objetivos)
                
                numeros_processos = df_filtrado[(df_filtrado['Tipo de Cr√©dito'] == 'Especial') & (df_filtrado['√ìrg√£o (UO)'] == orgao)]['N¬∫ do Processo'].unique()
                numeros_processos_texto = ', '.join(map(str, numeros_processos)) 
                
            digitacao(
                f'''No m√™s de {mes_por_extenso(mes)}, o √≥rg√£o {orgao} solicitou {qtd} ({por_extenso(qtd)}) processos de cr√©ditos especiais, 
                totalizando {formatar_valor(valor_total)} ({por_extenso_reais(valor_total)}). 
                Os n√∫meros dos processos solicitados s√£o: {numeros_processos_texto}. 
                Os objetivos associados a esses processos foram: "{objetivos_texto}".'''
            )

    with st.container():  # 2.2 - CR√âDITOS SUPLEMENTARES
            
        titulo_dinamico(f"### 2.2 - Cr√©ditos Suplementares")

        digitacao(
            '''No caso de cr√©ditos suplementares, a Constitui√ß√£o Federal, no ¬ß 8¬∞ do art. 165, permite que
            esta autoriza√ß√£o possa constar da pr√≥pria lei or√ßament√°ria. Com apoio nesta permiss√£o
            constitucional, as leis or√ßament√°rias do Estado trazem expressamente a autoriza√ß√£o para abertura de
            cr√©ditos suplementares sob certas condi√ß√µes e limites, e os decretos estaduais, que estabelecem as
            normas para a programa√ß√£o e execu√ß√£o or√ßament√°ria e financeira em cada exerc√≠cio, determinam os
            procedimentos complementares.'''
        )

        # qtd_processos_sem_cobertura = df_filtrado[df_filtrado['Origem de Recursos'].str.startswith('Sem Cobertura')].shape[0]
        qtd_processos_credito_suplementar = df_filtrado[df_filtrado['Tipo de Cr√©dito'] == 'Suplementar'].shape[0]
        qtd_processos_credito_suplementar_valores = df_filtrado[df_filtrado['Tipo de Cr√©dito'] == 'Suplementar']['Valor'].sum()
        digitacao(
            f'''Durante o m√™s de {mes_por_extenso(mes)} do exerc√≠cio or√ßament√°rio de {ano}, foram solicitados um total de
            {qtd_processos_credito_suplementar} ({por_extenso(qtd_processos_credito_suplementar)}), totalizando uma quantia de {formatar_valor(qtd_processos_credito_suplementar_valores)} ({por_extenso_reais(qtd_processos_credito_suplementar_valores)}), de
            cr√©ditos suplementares, presentes no quadro abaixo.'''
        )

        # Ordena√ß√£o por Valor (decrescente) e √ìrg√£o (crescente)
        df_filtrado_tabela = df_filtrado[df_filtrado['Tipo de Cr√©dito'] == 'Suplementar'][['√ìrg√£o (UO)', 'N¬∫ do Processo', 'Fonte de Recursos', 'Grupo de Despesas', 'Valor']] \
            .sort_values(by=['√ìrg√£o (UO)', 'Valor'], ascending=[False, False]).copy()

        # Formata os valores ap√≥s ordena√ß√£o
        df_filtrado_tabela['Valor'] = df_filtrado_tabela['Valor'].apply(formatar_valor)

        mostrar_tabela_pdf(
            df_filtrado_tabela,
            nome_tabela='Processos de Cr√©ditos Suplementares'
        )

    with st.container():  # 2.1.1.1 - ORIGEM DE RECURSOS E SEUS DIVERSOS TIPOS DE CPREDITO -> FUN√á√ÉO: gerar_relatorio_origem_recurso_com_graficos

        titulo_dinamico(f"#### 2.1.1 - Origem de recursos")

        titulo_dinamico(f"##### 2.1.1.1 - Sem cobertura")
        gerar_relatorio_origem_recurso_com_graficos(df_filtrado, 'Sem Cobertura', n=3, tipo_grafico='barra')

        titulo_dinamico(f"##### 2.1.1.2 - Super√°vit Financeiro")
        gerar_relatorio_origem_recurso_com_graficos(df_filtrado, 'Super√°vit Financeiro', n=3, tipo_grafico='barra')

        titulo_dinamico(f"##### 2.1.1.3 - Redu√ß√£o/Anula√ß√£o")
        gerar_relatorio_origem_recurso_com_graficos(df_filtrado, 'Redu√ß√£o/Anula√ß√£o', n=3, tipo_grafico='barra')

        titulo_dinamico(f"##### 2.1.1.4 - Excesso de Arrecada√ß√£o e Super√°vit Financeiro")
        gerar_relatorio_origem_recurso_com_graficos(df_filtrado, 'Excesso de Arrecada√ß√£o e Super√°vit Financeiro', n=3)

    with st.container():  # 3 - GRUPO DE DESPESAS

        titulo_dinamico(f"## 3 - Grupo de Despesas")

        nomes_despesas = {
            '1': '1 - Pessoal e Encargos Sociais',
            '2': '2 - Juros e Encargos da D√≠vida',
            '3': '3 - Outras Despesas Correntes',
            '4': '4 - Investimentos',
            '5': '5 - Invers√µes Financeiras',
            '6': '6 - Outras Despesas de Capital',
            '3 e 4': '3 e 4 - Outras Despesas e Investimentos'}

        grupo_despesa = df_filtrado.groupby('Grupo de Despesas')['Valor'].sum().reset_index()
        total_valor = grupo_despesa['Valor'].sum()
        grupo_despesa['Percentual'] = (grupo_despesa['Valor'] / total_valor) * 100
        grupo_despesa = grupo_despesa.sort_values(by='Valor', ascending=False).reset_index(drop=True)
        grupo_despesa['Grupo de Despesas'] = grupo_despesa['Grupo de Despesas'].map(nomes_despesas)
        texto_dinamico = f"Em an√°lise √†s solicita√ß√µes realizadas no m√™s de {mes_por_extenso(mes)}, constatou-se que "

        for idx, row in grupo_despesa.iterrows():
            grupo = row['Grupo de Despesas']
            percentual = row['Percentual']
            if idx == 0:
                texto_dinamico += f"a maior parte dos cr√©ditos foi destinada ao grupo de despesa {grupo}, que concentrou {formatar_valor2(percentual)} do total"
            elif idx == len(grupo_despesa) - 1:
                texto_dinamico += f", e o grupo {grupo} contribuiu com {formatar_valor2(percentual)} dos valores."
            else:
                texto_dinamico += f", seguido pelo grupo {grupo}, com {formatar_valor2(percentual)}"

        digitacao(texto_dinamico)

        cores_customizadas = ["#095AA2", "#E0E0E0", "#FFC300", "#FF5733", "#C70039"]

        gerar_grafico_pizza(
            labels=grupo_despesa['Grupo de Despesas'],
            values=grupo_despesa['Valor'],
            titulo_pdf=f"Gr√°fico: Distribui√ß√£o por Grupo de Despesas ({mes_por_extenso(mes)})",
            cores=cores_customizadas
        )

    with st.container():  # 4 - CR√âDITOS PUBLICADOS
            
        titulo_dinamico(f"## 4 - Cr√©ditos P√∫blicados")

        df['Data de Publica√ß√£o'] = pd.to_datetime(df['Data de Publica√ß√£o'], format='%d/%m/%Y', errors='coerce')
        df_publicados = df[
            (df['Situa√ß√£o'] == 'Publicado') &
            (df['Data de Publica√ß√£o'].dt.year == ano) &
            (df['Data de Publica√ß√£o'].dt.month == mes)
        ]

        df_publicados.reset_index(drop=True, inplace=True)
        qtd_publicados = df_publicados.shape[0]
        qtd_publicados_valores = df_publicados['Valor'].sum()
        df_tabela_publicados = df_publicados[['√ìrg√£o (UO)', 'N¬∫ do Processo', 'Fonte de Recursos' , 'Valor', ]]
        df_tabela_publicados['Valor'] = df_tabela_publicados['Valor'].apply(formatar_valor)


        digitacao(
            f'''Foram publicados {qtd_publicados} ({por_extenso(qtd_publicados)}) cr√©ditos, 
            somando um valor de {formatar_valor(qtd_publicados_valores)} ({por_extenso_reais(qtd_publicados_valores)}, no m√™s de
            {mes_por_extenso(mes)} de {ano}.'''
                )

        mostrar_tabela_pdf(df_tabela_publicados, nome_tabela='Processos Publicados')

    with st.container():  # 5 - LIMITE DE CR√âDITO
            
        titulo_dinamico(f"## 5 - Limite de Cr√©dito")

        digitacao(
            '''Ap√≥s todo o exposto, vale ressaltar que dispomos de um limite de 10% (dez por cento) do
            total da despesa fixada na LOA, para abertura de cr√©ditos suplementares, conforme o Lei Estadual n¬∫
            9.454 de 3 de janeiro de 2025:'''
        )

        digitacao(
        '''"Fica o Poder Executivo autorizado a abrir ao Or√ßamento Fiscal e da Seguridade Social, durante o
            exerc√≠cio, cr√©ditos suplementares, at√© o limite de 10% (dez por cento) do total da despesa fixada
            no art. 4¬∫ desta Lei, em cumprimento ao disposto nos incisos V e VI do art. 178 da Constitui√ß√£o
            Estadual e nos arts. 7¬∫ e 43 da Lei Federal n¬∫ 4.320, de 1964, sendo vedada, no entanto, a
            utiliza√ß√£o desta autoriza√ß√£o para abrir cr√©ditos suplementares ao Poder Judici√°rio, Minist√©rio
            P√∫blico, Defensoria P√∫blica e Tribunal de Contas e anula√ß√µes total ou parcial dos recursos
            destinados √†s emendas individuais impositivas."'''
                )

        digitacao(
        f'''Deste modo, sendo o total da despesa fixada na LOA, {formatar_valor(OR√áAMENTO_APROVADO_2025)} 
        ({por_extenso_reais(OR√áAMENTO_APROVADO_2025)}), tem-se que o montante dispon√≠vel a abertura de cr√©ditos suplementares consiste no valor de
            {formatar_valor(VALOR_DO_LIMITE)} ({por_extenso_reais(VALOR_DO_LIMITE)}).'''
        )

        df_calculo_limite_mes_corrente = df[
            (df['Situa√ß√£o'] == 'Publicado') &
            (df['Data de Publica√ß√£o'].dt.year == ano) &
            (df['Data de Publica√ß√£o'].dt.month <= mes)
        ]

        valor_utilizado_limite = df_calculo_limite_mes_corrente['Valor'].sum()
        valor_limite_sobre_usado = (valor_utilizado_limite / VALOR_DO_LIMITE) * 100

        gerar_grafico_pizza(
            labels=["Executado", "Dispon√≠vel"],
            values=[valor_limite_sobre_usado, 100 - valor_limite_sobre_usado],
            titulo_pdf="Limite Utilizado",
            cores=["#095AA2", "#E0E0E0"]
        )

        # fazer um dataframe com 4 colunas: OR√áAMENTO APROVADO 2025, VALOR DO LIMITE, VALOR UTILIZADO
        df_limite = pd.DataFrame({
            'Or√ßamento Aprovado 2025': [formatar_valor(OR√áAMENTO_APROVADO_2025)],
            'Valor do Limite (10%)': [formatar_valor(VALOR_DO_LIMITE)],
            'Valor Utilizado': [formatar_valor(valor_utilizado_limite)],
            'Dispon√≠vel': [formatar_valor(VALOR_DO_LIMITE - valor_utilizado_limite)]
        })
        mostrar_tabela_pdf(df_limite, nome_tabela='Limite de Cr√©dito')